function finished(){return page.evaluate(function(){return!!window.qunitDone})}function onfinishedTests(){var e=page.evaluate(function(){return JSON.stringify(window.qunitDone)});phantom.exit(JSON.parse(e).failed>0?1:0)}function addLogging(){window.document.addEventListener("DOMContentLoaded",function(){var e=[];QUnit.testDone(function(n){var o,t=n.module+": "+n.name;if(n.failed)for(console.log("Assertion Failed: "+t),o=0;o<e.length;o++)console.log("    "+e[o]);e=[]}),QUnit.log(function(n){var o;n.result||(o=n.message||"","undefined"!=typeof n.expected&&(o&&(o+=", "),o+="expected: "+n.expected+", but was: "+n.actual),e.push("Failed assertion: "+o))}),QUnit.done(function(e){console.log("Took "+e.runtime+"ms to run "+e.total+" tests. "+e.passed+" passed, "+e.failed+" failed."),window.qunitDone=e})},!1)}var url=phantom.args[0],page=require("webpage").create();page.onConsoleMessage=function(e){console.log(e)},page.onInitialized=function(){page.evaluate(addLogging)},page.open(url,function(e){if("success"!==e)console.log("Unable to access network: "+e),phantom.exit(1);else var n=setInterval(function(){finished()&&(clearInterval(n),onfinishedTests())},500)});