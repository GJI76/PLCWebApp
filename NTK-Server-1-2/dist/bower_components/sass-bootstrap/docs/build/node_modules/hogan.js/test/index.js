/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

function testScanTextNoTags(){var t="<h2>hi</h2>",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0]+"",t,"text is equal to first token")}function testScanOneTag(){var t="{{hmm}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name.")}function testScanMultipleTags(){var t="asdf{{hmm}}asdf2{{hmm2}}asdf3",e=Hogan.scan(t);is(e.length,5,"3 text tokens, 2 tag tokens."),is(e[0]+"","asdf","first token is text"),is(e[1].n,"hmm","second token is tag"),is(e[1].tag,"_v","second token is a variable"),is(e[2]+"","asdf2","third token is text"),is(e[3].n,"hmm2","fourth token is tag"),is(e[3].tag,"_v","fourth token is a variable"),is(e[4]+"","asdf3","Fifth token is text")}function testScanSectionOpen(){var t="{{#hmm}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"#","First token is a section.")}function testScanSectionClose(){var t="{{/hmm}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"/","First token is a section.")}function testScanSection(){var t="{{#hmm}}{{/hmm}}",e=Hogan.scan(t);is(e.length,2,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"#","First token is a section."),is(e[1].n,"hmm","Second token content is variable name."),is(e[1].tag,"/","Second token is a section.")}function testScanSectionInContent(){var t="abc{{#hmm}}def{{/hmm}}ghi",e=Hogan.scan(t);is(e.length,5,"3 text tokens, 2 tag tokens."),is(e[0]+"","abc","first token is text"),is(e[1].n,"hmm","second token is tag"),is(e[1].tag,"#","second token is a variable"),is(e[2]+"","def","third token is text"),is(e[3].n,"hmm","fourth token is tag"),is(e[3].tag,"/","fourth token is a variable"),is(e[4]+"","ghi","Fifth token is text")}function testScanNegativeSection(){var t="{{^hmm}}{{/hmm}}",e=Hogan.scan(t);is(e.length,2,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"^","First token is a negative section."),is(e[1].n,"hmm","First token content is variable name."),is(e[1].tag,"/","Second token is a section.")}function testScanPartial(){var t="{{>hmm}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,">","First token is a partial.")}function testScanBackwardPartial(){var t="{{<hmm}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"<","First token is a backward partial.")}function testScanAmpersandNoEscapeTag(){var t="{{&hmm}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"&","First token is an ampersand no-escape.")}function testScanTripleStache(){var t="{{{hmm}}}",e=Hogan.scan(t);is(e.length,1,"One token"),is(e[0].n,"hmm","First token content is variable name."),is(e[0].tag,"{","First token is a triple-stache.")}function testScanSectionWithTripleStacheInside(){var t="a{{#yo}}b{{{hmm}}}c{{/yo}}d",e=Hogan.scan(t);is(e.length,7,"One token"),is(e[0]+"","a","First token content is correct text."),is(e[1].n,"yo","Second token content is correct text."),is(e[1].tag,"#","Second token is a section."),is(e[2]+"","b","Third token content is correct text."),is(e[3].n,"hmm","Fourth token content is correct text."),is(e[3].tag,"{","Fourth token is a triple stache."),is(e[4]+"","c","Fifth token content is correct text."),is(e[5].n,"yo","Sixth token content is correct text."),is(e[5].tag,"/","Sixth token is a close."),is(e[6]+"","d","Seventh token content is correct text.")}function testScanSetDelimiter(){var t="a{{=<% %>=}}b",e=Hogan.scan(t);is(e.length,2,"change delimiter doesn't appear as token."),is(e[0]+"","a","text before change delimiter is processed."),is(e[1]+"","b","text after change delimiter is processed.")}function testScanResetDelimiter(){var t="a{{=<% %>=}}b<%hmm%>c<%={{ }}=%>d{{hmm}}",e=Hogan.scan(t);is(e.length,6,"8 tokens, delimiter changes don't count."),is(e[0]+"","a","first token is correct."),is(e[1]+"","b","third token is correct."),is(e[2].tag,"_v","third token is correct tag."),is(e[2].n,"hmm","third token is correct name."),is(e[3]+"","c","fifth token is correct."),is(e[4]+"","d","seventh token is correct."),is(e[5].tag,"_v","eighth token is correct tag."),is(e[5].n,"hmm","eighth token is correct name.")}function testSingleCharDelimiter(){var t="({{foo}} {{=[ ]=}}[text])",e=(Hogan.scan(t),Hogan.compile(t));s=e.render({foo:"bar",text:"It worked!"}),is(s,"(bar It worked!)","Hogan substitution worked after custom delimiters.")}function testSetDelimiterWithWhitespace(){var t="{{= | | =}}|foo|",e=Hogan.compile(t);s=e.render({foo:"bar"}),is(s,"bar","custom delimiters with whitespace works.")}function testParseBasic(){var t="test",e=Hogan.parse(Hogan.scan(t));is(e.length,1,"one parse node"),is(e[0]+"","test","text is correct")}function testParseVariables(){var t="test{{foo}}test!{{bar}}test!!{{baz}}test!!!",e=Hogan.parse(Hogan.scan(t));is(e.length,7,"one parse node"),is(e[0]+"","test","first text is correct"),is(e[2]+"","test!","second text is correct"),is(e[4]+"","test!!","third text is correct"),is(e[6]+"","test!!!","last text is correct"),is(e[1].n,"foo","first var is correct"),is(e[3].n,"bar","second var is correct"),is(e[5].n,"baz","third var is correct")}function testParseSection(){var t="a{{#foo}}b{{/foo}}c",e=Hogan.parse(Hogan.scan(t));is(e.length,3,"three nodes at base"),is(e[0]+"","a","correct text in first node"),is(e[1].hasOwnProperty("nodes"),!0,"second node is a section"),is(e[1].tag,"#","second node is a section"),is(e[1].n,"foo","correct name for section"),is(e[1].nodes[0]+"","b","correct text in section"),is(e[2]+"","c","correct text in last node")}function testParseIndexes(){var t="abc{{#foo}}asdf{{bar}}asdf{{/foo}}def",e=Hogan.parse(Hogan.scan(t));is(t.substring(e[1].i,e[1].end),"asdf{{bar}}asdf","section text indexes are correct")}function testParseNegativeSection(){var t="a{{^foo}}b{{/foo}}c",e=Hogan.parse(Hogan.scan(t));is(e.length,3,"three nodes at base"),is(e[0]+"","a","correct text in first node"),is(e[1].hasOwnProperty("nodes"),!0,"second node is a section"),is(e[1].tag,"^","second node is a negative section"),is(e[1].n,"foo","correct name for section"),is(e[1].nodes[0]+"","b","correct text in section"),is(e[2]+"","c","correct text in last node")}function testParseNestedSections(){var t="{{#bar}}{{#foo}}c{{/foo}}{{/bar}}",e=Hogan.parse(Hogan.scan(t));is(e.length,1,"one node at base"),is(e[0].tag,"#","open section is first node"),is(e[0].n,"bar","first section name is 'bar'"),is(e[0].nodes.length,1,"first section contains one node."),is(e[0].nodes[0].n,"foo","correct name for nested section"),is(e[0].nodes[0].nodes[0]+"","c","correct text in nested section")}function testMissingClosingTag(){var t="a{{#foo}}bc",e="";try{{Hogan.parse(Hogan.scan(t))}}catch(n){e=n.message}is(e,"missing closing tag: foo","Error is generated")}function testBadNesting(){var t="a{{#foo}}{{#bar}}b{{/foo}}{{/bar}}c",e="";try{{Hogan.parse(Hogan.scan(t))}}catch(n){e=n.message}is(e,"Nesting error: bar vs. foo","Error is generated")}function testBasicOutput(){var t="test",e=Hogan.compile(t);is(e.render(),t,"template renders one text node")}function testBasicOutputAsString(){var t="test",e=Hogan.compile(t,!0);is(e,"function(context, partials){this.buffer.push('test');};","template renders correct text function.")}function testOneVariable(){var t="test {{foo}} test",e=Hogan.compile(t),n=e.render({foo:"bar"});is(n,"test bar test","basic variable substitution works.")}function testOneVariableAsString(){var t="test {{foo}} test",e=Hogan.compile(t,!0);is(e,"function(context, partials){this.buffer.push('test ');\nthis.buffer.push(this.find('foo', context));\nthis.buffer.push(' test');};","Function text is correct with variable substitution.")}function testRenderWithWhitespace(){var t="{{ string }}",e=Hogan.compile(t);is(e.render({string:"---"}),"---","tags with whitespace render correctly.")}function testRenderWithWhitespaceAroundTripleStache(){var t="  {{{string}}}\n",e=Hogan.compile(t);is(e.render({string:"---"}),"  ---\n","triple stache surrounded by whitespace render correctly.")}function testRenderWithWhitespaceAroundAmpersand(){var t="  {{& string }}\n",e=Hogan.compile(t);is(e.render({string:"---"}),"  ---\n","ampersand surrounded by whitespace render correctly.")}function testMultipleVariables(){var t="test {{foo}} test {{bar}} test {{baz}} test {{foo}} test",e=Hogan.compile(t),n=e.render({foo:"42",bar:"43",baz:"44"});is(n,"test 42 test 43 test 44 test 42 test","all variables render correctly.")}function testNumberValues(){var t="integer: {{foo}} float: {{bar}} negative: {{baz}}",e=Hogan.compile(t),n=e.render({foo:42,bar:42.42,baz:-42});is(n,"integer: 42 float: 42.42 negative: -42","numbers render correctly")}function testObjectRender(){var t="object: {{foo}}",e=Hogan.compile(t),n=e.render({foo:{}});is(n,"object: [object Object]","objects render default toString.")}function testObjectToStringRender(){var t="object: {{foo}}",e=Hogan.compile(t),n=e.render({foo:{toString:function(){return"yo!"}}});is(n,"object: yo!","objects render supplied toString.")}function testArrayRender(){var t="array: {{foo}}",e=Hogan.compile(t),n=e.render({foo:["a","b","c"]});is(n,"array: a,b,c","arrays render default toString.")}function testEscaping(){var t="{{foo}}",e=Hogan.compile(t),n=e.render(),n=e.render({foo:"< > <div> ' \" &"});is(n,"&lt; &gt; &lt;div&gt; &#39; &quot; &amp;","input correctly escaped.");var o={"'":"&#39;",'"':"&quot;","<":"&lt;",">":"&gt;","&":"&amp;"};for(var s in o){var n=e.render({foo:s+" just me"});is(n,o[s]+" just me","input correctly escaped.")}}function testMustacheInjection(){var t="{{foo}}",e=Hogan.compile(t);s=e.render({foo:"{{{<42}}}"}),is(s,"{{{&lt;42}}}","Can't inject mustache")}function testTripleStache(){var t="{{{foo}}}",e=Hogan.compile(t),n=e.render({foo:"< > <div> ' \" &"});is(n,"< > <div> ' \" &","input correctly not-escaped.")}function testAmpNoEscaping(){var t="{{&foo}}",e=Hogan.compile(t),n=e.render({foo:"< > <div> ' \" &"});is(n,"< > <div> ' \" &","input correctly not-escaped.")}function testPartial(){var t="this is text from the partial--the magic number {{foo}} is from a variable",e=Hogan.compile(t),n="This template contains a partial ({{>testPartial}}).",o=Hogan.compile(n),s=o.render({foo:42},{testPartial:e});is(s,"This template contains a partial (this is text from the partial--the magic number 42 is from a variable).","partials work")}function testNestedPartials(){var t="this is text from the partial--the magic number {{foo}} is from a variable",e=Hogan.compile(t),n="This template contains a partial ({{>testPartial}}).",o=Hogan.compile(n),s="This template contains a partial that contains a partial [{{>testPartial2}}].",i=Hogan.compile(s),a=i.render({foo:42},{testPartial:e,testPartial2:o});is(a,"This template contains a partial that contains a partial [This template contains a partial (this is text from the partial--the magic number 42 is from a variable).].","nested partials work")}function testNegativeSection(){var t="This template {{^foo}}BOO {{/foo}}contains an inverted section.",e=Hogan.compile(t),n=e.render();is(n,"This template BOO contains an inverted section.","inverted sections with no context work"),n=e.render({foo:[]}),is(n,"This template BOO contains an inverted section.","inverted sections with empty list context work"),n=e.render({foo:!1}),is(n,"This template BOO contains an inverted section.","inverted sections with false context work"),n=e.render({foo:""}),is(n,"This template contains an inverted section.","inverted sections with empty string context work"),n=e.render({foo:!0}),is(n,"This template contains an inverted section.","inverted sections with true context work"),n=e.render({foo:function(){return!1}}),is(n,"This template BOO contains an inverted section.","inverted sections with false returning method in context work")}function testSectionElision(){var t="This template {{#foo}}BOO {{/foo}}contains a section.",e=Hogan.compile(t),n=e.render();is(n,"This template contains a section.","sections with no context work"),n=e.render({foo:[]}),is(n,"This template contains a section.","sections with empty list context work"),n=e.render({foo:!1}),is(n,"This template contains a section.","sections with false context work")}function testSectionObjectContext(){var t="This template {{#foo}}{{bar}} {{/foo}}contains a section.",e=Hogan.compile(t),n=e.render({foo:{bar:42}});is(n,"This template 42 contains a section.","sections with object context work")}function testSectionArrayContext(){var t="This template {{#foo}}{{bar}} {{/foo}}contains a section.",e=Hogan.compile(t),n=e.render({foo:[{bar:42},{bar:43},{bar:44}]});is(n,"This template 42 43 44 contains a section.","sections with object ctx and array values work")}function testFalsyVariableNoRender(){var t="I ({{cannot}}) be seen!",e=Hogan.compile(t),n=e.render();is(n,"I () be seen!","missing value doesn't render.")}function testSectionExtensions(){var t="Test {{_//|__foo}}bar{{/foo}}",e={sectionTags:[{o:"_//|__foo",c:"foo"}]},n=Hogan.parse(Hogan.scan(t),e);is(n[1].tag,"#","_//|__foo node transformed to section"),is(n[1].n,"_//|__foo","_//|__foo node transformed to section");var o=Hogan.compile(t,e),s=o.render({"_//|__foo":!0});is(s,"Test bar","Custom sections work")}function testMisnestedSectionExtensions(){var t="Test {{__foo}}bar{{/bar}}",e={sectionTags:[{o:"__foo",c:"foo"},{o:"__bar",c:"bar"}]},n="";try{{Hogan.parse(Hogan.scan(t),e)}}catch(o){n=o.message}is(n,"Nesting error: __foo vs. bar","Error is generated")}function testNestedSection(){var t="{{#foo}}{{#bar}}{{baz}}{{/bar}}{{/foo}}",e=Hogan.compile(t),n=e.render({foo:42,bar:42,baz:42});is(n,"42","can reach up context stack")}function testDottedNames(){var t='"{{person.name}}" == "{{#person}}{{name}}{{/person}}"',e=Hogan.compile(t),n=e.render({person:{name:"Joe"}});is(n,'"Joe" == "Joe"',"dotted names work")}function testImplicitIterator(){var t="{{#stuff}} {{.}} {{/stuff}}",e=Hogan.compile(t),n=e.render({stuff:[42,43,44]});is(n," 42  43  44 ","implicit iterators work")}function testPartialsAndDelimiters(){var t="{{>include}}*\n{{= | | =}}\n*|>include|",e=" .{{value}}. ",n=Hogan.compile(e),o=Hogan.compile(t),s=o.render({value:"yes"},{include:n});is(s," .yes. *\n* .yes. ","partials work around delimiters")}function testStringPartials(){var t="foo{{>mypartial}}baz",e=" bar ",n=Hogan.compile(t),o=n.render({},{mypartial:e});is(o,"foo bar baz","string partial works.")}function testMissingPartials(){var t="foo{{>mypartial}} bar",e=Hogan.compile(t),n=e.render({});is(n,"foo bar","missing partial works.")}function testIndentedStandaloneComment(){var t="Begin.\n {{! Indented Comment Block! }}\nEnd.",e=Hogan.compile(t),n=e.render();is(n,"Begin.\nEnd.","Standalone comment blocks are removed.")}function testNewLineBetweenDelimiterChanges(){var t={section:!0,data:"I got interpolated."},e="\n{{#section}}\n {{data}}\n |data|\n{{/section}}x\n\n{{= | | =}}\n|#section|\n {{data}}\n |data|\n|/section|",n=Hogan.compile(e),o=n.render(t);is(o,"\n I got interpolated.\n |data|\nx\n\n {{data}}\n I got interpolated.\n","render correct")}function testMustacheJSApostrophe(){var t="{{apos}}{{control}}",e=Hogan.compile(t),n=e.render({apos:"'",control:"X"});is(n,"&#39;X","Apostrophe is escaped.")}function testMustacheJSArrayOfImplicitPartials(){var t="Here is some stuff!\n{{#numbers}}\n{{>partial}}\n{{/numbers}}\n",e="{{.}}\n",n=Hogan.compile(t),o=n.render({numbers:[1,2,3,4]},{partial:e});is(o,"Here is some stuff!\n1\n2\n3\n4\n","Partials with implicit iterators work.")}function testMustacheJSArrayOfPartials(){var t="Here is some stuff!\n{{#numbers}}\n{{>partial}}\n{{/numbers}}\n",e="{{i}}\n",n=Hogan.compile(t),o=n.render({numbers:[{i:1},{i:2},{i:3},{i:4}]},{partial:e});is(o,"Here is some stuff!\n1\n2\n3\n4\n","Partials with arrays work.")}function testMustacheJSArrayOfStrings(){var t="{{#strings}}{{.}} {{/strings}}",e=Hogan.compile(t),n=e.render({strings:["foo","bar","baz"]});is(n,"foo bar baz ","array of strings works with implicit iterators.")}function testMustacheJSUndefinedString(){var t="foo{{bar}}baz",e=Hogan.compile(t),n=e.render({bar:void 0});is(n,"foobaz","undefined value does not render.")}function testMustacheJSTripleStacheAltDelimiter(){var t="{{=<% %>=}}<% foo %> {{foo}} <%{bar}%> {{{bar}}}",e=Hogan.compile(t),n=e.render({foo:"yeah",bar:"hmm"});is(n,"yeah {{foo}} hmm {{{bar}}}","triple stache inside alternate delimiter works.")}function testShootOutString(){var t="Hello World!",e="Hello World!",n=Hogan.compile(t),o=n.render({});is(o,e,"Shootout String compiled correctly")}function testShootOutReplace(){var t="Hello {{name}}! You have {{count}} new messages.",e="Hello Mick! You have 30 new messages.",n=Hogan.compile(t),o=n.render({name:"Mick",count:30});is(o,e,"Shootout Replace compiled correctly")}function testShootOutArray(){var t="{{#names}}{{name}}{{/names}}",e="MoeLarryCurlyShemp",n=Hogan.compile(t),o=n.render({names:[{name:"Moe"},{name:"Larry"},{name:"Curly"},{name:"Shemp"}]});is(o,e,"Shootout Array compiled correctly")}function testShootOutObject(){var t="{{#person}}{{name}}{{age}}{{/person}}",e="Larry45",n=Hogan.compile(t),o=n.render({person:{name:"Larry",age:45}});is(o,e,"Shootout Object compiled correctly")}function testShootOutPartial(){var t="{{#peeps}}{{>replace}}{{/peeps}}",e=Hogan.compile(t),n=Hogan.compile(" Hello {{name}}! You have {{count}} new messages."),o=e.render({peeps:[{name:"Moe",count:15},{name:"Larry",count:5},{name:"Curly",count:2}]},{replace:n}),s=" Hello Moe! You have 15 new messages. Hello Larry! You have 5 new messages. Hello Curly! You have 2 new messages.";is(o,s,"Shootout Partial compiled correctly")}function testShootOutRecurse(){var t="{{name}}{{#kids}}{{>recursion}}{{/kids}}",e=Hogan.compile(t),n=Hogan.compile("{{name}}{{#kids}}{{>recursion}}{{/kids}}"),o=e.render({name:"1",kids:[{name:"1.1",kids:[{name:"1.1.1",kids:[]}]}]},{recursion:n}),s="11.11.1.1";is(o,s,"Shootout Recurse compiled correctly")}function testShootOutFilter(){var t="{{#filter}}foo {{bar}}{{/filter}}",e=Hogan.compile(t),n=e.render({filter:function(){return function(t,e){return e(t).toUpperCase()}},bar:"bar"}),o="FOO BAR";is(n,o,"Shootout Filter compiled correctly")}function testShootOutComplex(){var t='<h1>{{header}}</h1>{{#hasItems}}<ul>{{#items}}{{#current}}<li><strong>{{name}}</strong></li>{{/current}}{{^current}}<li><a href="{{url}}">{{name}}</a></li>{{/current}}{{/items}}</ul>{{/hasItems}}{{^hasItems}}<p>The list is empty.</p>{{/hasItems}}',e='<h1>Colors</h1><ul><li><strong>red</strong></li><li><a href="#Green">green</a></li><li><a href="#Blue">blue</a></li></ul>',n=Hogan.compile(t),o=n.render({header:function(){return"Colors"},items:[{name:"red",current:!0,url:"#Red"},{name:"green",current:!1,url:"#Green"},{name:"blue",current:!1,url:"#Blue"}],hasItems:function(){return 0!==this.items.length},empty:function(){return 0===this.items.length}});is(o,e,"Shootout Complex compiled correctly")}function testRenderOutput(){if(!doc){var t=require("fs"),e="test/templates",n="test/html";t.readdirSync(e).forEach(function(o){var s=t.readFileSync([e,o].join("/"),"utf-8"),i=Hogan.compile(s),a=i.render({}),r=t.readFileSync([n,o].join("/").replace(/mustache$/,"html")).toString();is(a===r,!0,o+" should correctly render html")})}}function testDefaultRenderImpl(){var t=new Hogan.Template;is(""===t.render(),!0,"default renderImpl returns an array.")}function appendText(t,e){var n=document.createTextNode(e);t.appendChild(n),t.appendChild(document.createElement("br"))}function is(t,e,n){t===e?(output("OK:   "+n),++passed):(output("FAIL: "+n),output("Expected |"+e+"|"),output("     Got |"+t+"|"),++failed)}function complete(){output("\nTests Complete"),output("--------------"),output("Passed: "+passed),output("Failed: "+failed),output("\n")}function runTests(){output("Tests Starting"),output("--------------"),testScanTextNoTags(),testScanOneTag(),testScanMultipleTags(),testScanSectionOpen(),testScanSectionClose(),testScanSection(),testScanSectionInContent(),testScanNegativeSection(),testScanPartial(),testScanBackwardPartial(),testScanAmpersandNoEscapeTag(),testScanTripleStache(),testScanSectionWithTripleStacheInside(),testScanSetDelimiter(),testScanResetDelimiter(),testSetDelimiterWithWhitespace(),testSingleCharDelimiter(),testParseBasic(),testParseVariables(),testParseSection(),testParseIndexes(),testParseNegativeSection(),testParseNestedSections(),testMissingClosingTag(),testBadNesting(),testBasicOutput(),testOneVariable(),testMultipleVariables(),testNumberValues(),testObjectRender(),testObjectToStringRender(),testArrayRender(),testEscaping(),testMustacheInjection(),testTripleStache(),testAmpNoEscaping(),testPartial(),testNestedPartials(),testNegativeSection(),testSectionElision(),testSectionObjectContext(),testSectionArrayContext(),testRenderWithWhitespace(),testRenderWithWhitespaceAroundTripleStache(),testRenderWithWhitespaceAroundAmpersand(),testFalsyVariableNoRender(),testRenderOutput(),testDefaultRenderImpl(),testSectionExtensions(),testMisnestedSectionExtensions(),testNestedSection(),testShootOutString(),testShootOutReplace(),testShootOutArray(),testShootOutObject(),testShootOutPartial(),testShootOutRecurse(),testShootOutFilter(),testShootOutComplex(),testDottedNames(),testImplicitIterator(),testPartialsAndDelimiters(),testStringPartials(),testMissingPartials(),testIndentedStandaloneComment(),testNewLineBetweenDelimiterChanges(),testMustacheJSApostrophe(),testMustacheJSArrayOfImplicitPartials(),testMustacheJSArrayOfPartials(),testMustacheJSArrayOfStrings(),testMustacheJSUndefinedString(),testMustacheJSTripleStacheAltDelimiter(),complete()}var Hogan=Hogan||require("../lib/hogan"),doc=this.document;if(!this.output)var output=function(t){return doc?appendText(doc.getElementById("console"),t):console.log(t)};var passed=0,failed=0;doc?window.onload=runTests:runTests();